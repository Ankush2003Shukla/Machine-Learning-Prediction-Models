# -*- coding: utf-8 -*-
"""Boston_House_Price_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MbMUFzRw1UiM1FIvLGRHAvmbK0OYtAWD
"""
'''Problem Statement
make an ml model to check the price of the Boston houses
'''
#importing dependencies
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

#loading the dataset
house_data = pd.read_csv('/content/BostonHousing.csv')

#printing the first 5 rows of the dataset
house_data.head()

#printing the size of the dataframe
house_data.shape

#checking the missing vakues in dataset
house_data.isnull().sum()

#checking some statistical measures
house_data.describe()

#getting the correlation in dataset
correlation = house_data.corr()

#plotting a figure
plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

X = house_data.drop(columns='price',axis=1)
Y = house_data['price']

print(X)

print(Y)

#splitting the dataset into training and testing data
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=1)

print(X.shape,X_train.shape,X_test.shape)

#model training
model = XGBRegressor()
model.fit(X_train,Y_train)

#Accuracy for training data
Training_Prediction_accuracy = model.predict(X_train)
#R squared error
score1 = metrics.r2_score(Y_train,Training_Prediction_accuracy)
#Mean Absolute error
score2 = metrics.mean_absolute_error(Y_train,Training_Prediction_accuracy)

print("R squared error : ",score1)
print("Mean Absolute error : ",score2)

#Accuracy for testing data
Testing_Prediction_accuracy = model.predict(X_test)
#R squared error
score3 = metrics.r2_score(Y_test,Testing_Prediction_accuracy)
#Mean Absolute error
score4 = metrics.mean_absolute_error(Y_test,Testing_Prediction_accuracy)

print("R squared error : ",score3)
print("Mean Absolute error : ",score4)

#plot a graph
plt.scatter(Y_train,Training_Prediction_accuracy)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual price vs predicted price")

#making a prediction system
input=(0.01311,90,1.22,0,0.403,7.249,21.9,8.6966,5,226,17.9,395.93,4.81)
input_array = np.asarray(input)
input_array_reshaped = input_array.reshape(1,-1)
prediction = model.predict(input_array_reshaped)
print("The price of the house : ",prediction[0])

