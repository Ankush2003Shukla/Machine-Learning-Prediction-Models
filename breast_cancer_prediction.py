# -*- coding: utf-8 -*-
"""Breast_Cancer_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m_XS1Vf2aYAOA3sEiUqGHAHnhUkmFnPe

**Problem Statement**

Making an ml model to check whether the person has a breast cancer or not.
"""

#importing the dependencies
import numpy as np
import pandas as pd
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading the dataset
datasets = sklearn.datasets.load_breast_cancer()

print(datasets)

dataset = pd.DataFrame(datasets.data, columns = datasets.feature_names)

dataset['target'] = datasets.target

#printing first five rows
dataset.head()

#getting the rows and columns of the dataset
dataset.shape

#getting more info about the dataset
dataset.info()

#checking the null values
dataset.isnull().sum()

#getting some statisticsal values of the dataset
dataset.describe()

X = dataset.drop(columns='target',axis=1)
Y = dataset['target']

print(X)

print(Y)

#splitting the data into train test split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

#training the model
model = LogisticRegression()
model.fit(X_train,Y_train)

#checking the training accuracy of model
training_prediction = model.predict(X_train)
Training_Accuracy = accuracy_score(Y_train,training_prediction)
print("The training accuracy of the model : ",round(Training_Accuracy*100,2),"%")

#checking the testing accuracy of model
testing_prediction = model.predict(X_test)
Testing_Accuracy = accuracy_score(Y_test,testing_prediction)
print("The testing accuracy of the model : ",round(Testing_Accuracy*100,2),"%")

#Making a Prediction System
input = (12.46,24.04,83.97,475.9,0.1186,0.2396,0.2273,0.08543,0.203,0.08243,0.2976,1.599,2.039,23.94,0.007149,0.07217,0.07743,0.01432,0.01789,0.01008,15.09,40.68,97.65,711.4,0.1853,1.058,1.105,0.221,0.4366,0.2075)
input_array = np.asarray(input)
input_reshaped = input_array.reshape(1,-1)
prediction = model.predict(input_reshaped)
if prediction[0]==0:
  print("Patient is Malignant")
else:
  print("Patient is Benign")

import pickle

filename = 'Breast_Cancer_model.sav'
pickle.dump(model,open(filename,'wb'))