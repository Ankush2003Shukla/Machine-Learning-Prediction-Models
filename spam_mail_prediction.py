# -*- coding: utf-8 -*-
"""Spam_Mail Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vdJNs9HoXVpCmS6X7gKUBMWa63tTyI5P
"""
'''Problem_Statement

    Make an ML Model to find out whether the mail is spam or ham
'''
#importing the dependencies
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading the dataset
mail_data = pd.read_csv('/content/mail_data.csv')

print(mail_data)

#printing the first five rows of the dataset
mail_data.head()

#dealing with the missing values in the dataset
mail_dataset = mail_data.where((pd.notnull(mail_data)),'')
mail_dataset.head()

mail_dataset.shape

#spam---->0
#Ham----->1
#implemeting label encoding
mail_dataset.loc[mail_dataset['Category']=='spam','Category',] = 0
mail_dataset.loc[mail_dataset['Category']=='ham','Category',] = 1

X = mail_dataset['Message']
Y = mail_dataset['Category']

print(Y)

#splitting the dataset into training and testing data
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

#implementing feature extraction
feature_extraction = TfidfVectorizer(min_df=1,stop_words='english',lowercase=True)
X_train_feature = feature_extraction.fit_transform(X_train)
X_test_feature = feature_extraction.transform(X_test)
Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

print(X_train_feature)

#training the model
model = LogisticRegression()
model.fit(X_train_feature,Y_train)

#getting accuracy on the training data / model Evaluation
Training_Prediction = model.predict(X_train_feature)
Training_Accuracy = accuracy_score(Training_Prediction,Y_train)
print("The training Accuracy of the model : ",Training_Accuracy)

#getting accuracy on the testing data / model Evaluation
Testing_Prediction = model.predict(X_test_feature)
Testing_Accuracy = accuracy_score(Testing_Prediction,Y_test)
print("The testing Accuracy of the model : ",Testing_Accuracy)

#making a prediction model
input=["SIX chances to win CASH! From 100 to 20,000 pounds txt> CSH11 and send to 87575. Cost 150p/day, 6days, 16+ TsandCs apply Reply HL 4 info"]
input_data_features = feature_extraction.transform(input)
prediction = model.predict(input_data_features)
if(prediction[0]==1):
  print("It is a Ham Message")
else:
  print("It is a Spam Message")

