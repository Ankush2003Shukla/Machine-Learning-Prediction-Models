# -*- coding: utf-8 -*-
"""Rock VS Mine Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dwqA_19RMvVuoHhTqXTAGwKC1arz43Sm
"""
'''Problem_Statement

Let imagine there is a war going on between two countries so submarine of a country is going underwater to another country and the 
other country planted some mines in the ocean but it can be a rock also. So this code determines whether it is a rock or mine 
This code has 76.19% accuracy

'''
#importing the dependencies
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading the dataset
sonar_dataset = pd.read_csv('/content/sonar data.csv',header=None)

#printing the first 5 rows of the dataset
sonar_dataset.head()

#size of the dataframe
sonar_dataset.shape

#statistical values of the dataset
sonar_dataset.describe()

#Number of mines and rocks in the dataset
# M is Mine
# R is Rock
sonar_dataset[60].value_counts()

sonar_dataset.groupby(60).mean()

X = sonar_dataset.drop(columns=60,axis=1)
Y = sonar_dataset[60]

print(X)
print(Y)

#splitting the dataset into training and testing
X_train, X_test,Y_train,Y_test= train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=1)

print(X.shape,X_train.shape,X_test.shape)

#training the model
model = LogisticRegression()

model.fit(X_train,Y_train)

#checking the accuracy/Model Evaluation for training data
x_train_predict = model.predict(X_train)
training_accuracy = accuracy_score(x_train_predict,Y_train)

#checking the accuracy for training data
print("Accuracy for training data : ",training_accuracy)

#checking the accuracy/Model Evaluation for testing data
x_test_predict = model.predict(X_test)
testing_accuracy = accuracy_score(x_test_predict,Y_test)

#checking the accuracy for testing data
print("Accuracy for testing data : ",testing_accuracy)

#Making a Precictive System
input = (0.0388,0.0324,0.0688,0.0898,0.1267,0.1515,0.2134,0.2613,0.2832,0.2718,0.3645,0.3934,0.3843,0.4677,0.5364,0.4823,0.4835,0.5862,0.7579,0.6997,0.6918,0.8633,0.9107,0.9346,0.7884,0.8585,0.9261,0.7080,0.5779,0.5215,0.4505,0.3129,0.1448,0.1046,0.1820,0.1519,0.1017,0.1438,0.1986,0.2039,0.2778,0.2879,0.1331,0.1140,0.1310,0.1433,0.0624,0.0100,0.0098,0.0131,0.0152,0.0255,0.0071,0.0263,0.0079,0.0111,0.0107,0.0068,0.0097,0.0067)
input_array = np.asarray(input)
Array_reshaped = input_array.reshape(1,-1)
prediction = model.predict(Array_reshaped)
if(prediction == 'R'):
  print("It is a Rock")
else:
  print("It is a mine")

