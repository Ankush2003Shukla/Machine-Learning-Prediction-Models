# -*- coding: utf-8 -*-
"""Loan_Approval_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1__-VnI8XbOfQka5S7s-OpCMTSbqZ3BZq
"""
'''Problem Statement

Make a Ml model to predict whether loan should approve or not
'''
#importing the dependencies
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

loan_data = pd.read_csv('/content/loan_dataset.csv')

loan_data.head()

#checking the size of the dataframe
loan_data.shape

#checking missing values
loan_data.isnull().sum()

#dealing with missing values
loan_data = loan_data.dropna()

#checking missing values again
loan_data.isnull().sum()

loan_data.describe()

#label encoding
loan_data.replace({"Loan_Status":{'N':0,'Y':1}},inplace=True)

loan_data['Loan_Status'].value_counts()

loan_data['Dependents'].value_counts()

loan_data = loan_data.replace(to_replace='3+',value=4)

#plotting a graph with education and loan_status
sns.countplot(x='Education',hue='Loan_Status',data=loan_data)

#plotting a graph with Married and loan_status
sns.countplot(x='Married',hue='Loan_Status',data=loan_data)

#label encoding
loan_data.replace({'Married':{'No':0,'Yes':1},'Gender':{'Female':0,'Male':1},'Self_Employed':{'No':0,'Yes':1},'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},'Education':{'Not Graduate':0,'Graduate':1}},inplace=True)

loan_data.head()

X = loan_data.drop(columns=['Loan_ID','Loan_Status'],axis=1)
Y = loan_data['Loan_Status']

#splitting the data into training and testing data
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=2)

#training the model
classifier = svm.SVC(kernel='linear')
classifier.fit(X_train,Y_train)

#accuracy for training data/model evaluation
training_data_accuracy = classifier.predict(X_train)
training_accuracy = accuracy_score(training_data_accuracy,Y_train)
print("Accuracy of model for training data : ",training_accuracy)

#accuracy for testing data/model evaluation
testing_data_accuracy = classifier.predict(X_test)
testing_accuracy = accuracy_score(testing_data_accuracy,Y_test)
print("Accuracy of model for testing data : ",testing_accuracy)

#making a prediction system
input=(1,	0,	0,	1,	0,	6000,	0.0,	141.0,	360.0,	1.0,	2)
input_array=np.asarray(input)
input_array_reshaped = input_array.reshape(1,-1)
prediction = classifier.predict(input_array_reshaped)
if(prediction[0]==0):
  print("No ,Not Approved")
else:
  print("Yes ,Approved")

