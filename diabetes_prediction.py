# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_4VwkKrsUjT19BTCZCMEoUwoblenk02p
"""
'''Problem_Statement

    Make an ML Model on Whether a person have a Diabetes or not? using SVM 
    
'''
#importing the dependencies
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

#loading the dataset
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

#printing the first 5 rows of the dataset
diabetes_dataset.head()

#checking the size of the dataframe
diabetes_dataset.shape

#getting the statistical values of the dataset
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

X = diabetes_dataset.drop(columns = 'Outcome',axis = 1)
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

#Data Standarization
scaler = StandardScaler()

scaler.fit(X)
data_standarization = scaler.transform(X)
print(data_standarization)

X = data_standarization
Y = diabetes_dataset['Outcome']

#splitting the data into training and testing data
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

#training the model
classifier = svm.SVC(kernel='linear')
classifier.fit(X_train,Y_train)

#checking the training accuracy of the model/ model Evaluation
Training_prediction = classifier.predict(X_train)
Training_Accuracy = accuracy_score(Training_prediction,Y_train)
print("Accuracy of the training data : ",Training_Accuracy)

#checking the testing accuracy of the model/ model Evaluation
Testing_prediction = classifier.predict(X_test)
Testing_Accuracy = accuracy_score(Testing_prediction,Y_test)
print("Accuracy of the testing data : ",Testing_Accuracy)

#making a prediction model
input=(2,197,70,45,543,30.5,0.158,53)
numpy_array = np.asarray(input)
array_reshaped = numpy_array.reshape(1,-1)

std_data = scaler.transform(array_reshaped)
prediction = classifier.predict(std_data)
if(prediction==0):
  print("You do not have a Diabetes")
else:
  print("You have a Diabetes")

