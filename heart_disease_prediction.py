# -*- coding: utf-8 -*-
"""Heart_Disease_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dGTrYFSwPki5t3FvDtL8-JCgfoUU6E6W
"""
'''Problem Statement
make an ml model to check whether the person have a heart disease or not
'''
#importing the dependencies
import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

#loading the csv file
heart_data = pd.read_csv('/content/heart_disease_data.csv')

#printing the first 5 rows
heart_data.head()

#checking the size of the dataframe
heart_data.shape

#checking the missing values in the dataset
heart_data.info()

#checking the statistical measures
heart_data.describe()

#checking the imbalancing of data in the dataset
heart_data['target'].value_counts()

X = heart_data.drop(columns='target',axis=1)
Y = heart_data['target']

print(X)

print(Y)

#splitting the dataset into training and testing data
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

#training the model
model = LogisticRegression()
model.fit(X_train,Y_train)

#checking the training accuracy of the model
training_model_accuracy = model.predict(X_train)
training_accuracy = accuracy_score(training_model_accuracy,Y_train)
print("the acccuracy of model on training data : ",training_accuracy)

#checking the testing accuracy of the model
testing_model_accuracy = model.predict(X_test)
testing_accuracy = accuracy_score(testing_model_accuracy,Y_test)
print("the acccuracy of model on testing data : ",testing_accuracy)

#making a prediction system
input=(61,1,0,148,203,0,1,161,0,0,2,1,3)
input_array = np.asarray(input)
input_reshaped = input_array.reshape(1,-1)
prediction = model.predict(input_reshaped)
if(prediction[0]==0):
  print("Patient do not have a Heart Disease")
else:
  print("Patient have a Heart Disease")

