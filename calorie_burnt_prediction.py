# -*- coding: utf-8 -*-
"""Calorie_Burnt_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t-1NMhO413vQOuT32MJ7anNVpAqqXZUZ
"""
'''
Problem Statement 
Make a ml model to predict the calorie burnt by the person
'''
#importing the dependencies
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error

#loading the dataset
exercise = pd.read_csv('/content/exercise.csv')
calorie = pd.read_csv('/content/calories.csv')

#printing the first five rows
exercise.head()

#printing the first five rows
calorie.head()

calories = pd.concat([exercise,calorie['Calories']],axis=1)

#printing the first five rows
calories.head()

#getting some info on dataset
calories.info()

#checking null values
calories.isnull().sum()

#checking some statistical values
calories.describe()

"""**Data Visualization**"""

sns.set()
sns.countplot(calories['Gender'])

sns.displot(calories['Age'])

sns.displot(calories['Height'])

sns.displot(calories['Weight'])

calories.replace({"Gender":{'male':0,'female':1}},inplace=True)

#getting the correlation of the data
correlation = calories.corr()

plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,fmt=".1f",annot=True,annot_kws={'size':8},cmap='Blues')

X = calories.drop(columns=['User_ID','Calories'],axis=1)
Y = calories['Calories']

#splitting the data into train test split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

#training the model
model = XGBRegressor()
model.fit(X_train,Y_train)

Training_prediction = model.predict(X_train)
print(Training_prediction)

error = mean_absolute_error(Y_train,Training_prediction)
print("The Mean Absolute Error : ",error)

Testing_prediction = model.predict(X_test)
print(Testing_prediction)

error2 = mean_absolute_error(Y_test,Testing_prediction)
print("The Mean Absolute Error : ",error2)

import pickle

filename = 'Calorie_model.sav'
pickle.dump(model,open(filename,'wb'))
